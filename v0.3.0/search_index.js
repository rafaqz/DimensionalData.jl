var documenterSearchIndex = {"docs":
[{"location":"#DimensionalData.jl-1","page":"DimensionalData.jl","title":"DimensionalData.jl","text":"","category":"section"},{"location":"#","page":"DimensionalData.jl","title":"DimensionalData.jl","text":"Modules = [DimensionalData]\nOrder   = [:module, :type, :function, :macro]","category":"page"},{"location":"#DimensionalData.DimensionalData","page":"DimensionalData.jl","title":"DimensionalData.DimensionalData","text":"DimensionalData.jl provides types and methods for indexing with named dimensions, using named dimensions in Base and Statistics methods instead of Integer dims, and selecting data from dimension values instead of using indices directly.\n\nDimensions\n\nDimensions are simply types that wrap values. They both store dimension values and are used for dimension lookup or indices, ranges or dimension number. X, Y, Z and Time are the unexported defaults, add this line to use them:  \n\nusing DimensionalData: X, Y, Z, Time\n\nA generalised Dim type is available to use arbitrary symbols to name dimensions.  Custom dimensions can be defined using the @dim macro.\n\nWe can use dim wrappers for indexing, so that the dimension order in the underlying array  does not need to be known:\n\na[X(1:10), Y(1:4)]\n\nSelectors\n\nSelectors find indices in the dimension based on values At, Near, or Between the index value(s).\n\nWe can use selectors in conjuction with dim wrappers:\n\na[X(1:10), Y<|At(25.7)]\n\nWithout dim wrappers selectors must be in the right order:\n\nusin Unitful\na[Near(23u\"s\"), Between(10.5u\"m\", 50.5u\"m\")]\n\nDim types or objects can be used instead of a dimension number in many  Base and Statistics methods:\n\nmean(a; dims=X)\nstd(a; dims=Y())\n\n\n\n\n\n","category":"module"},{"location":"#DimensionalData.AbstractAlignedGrid","page":"DimensionalData.jl","title":"DimensionalData.AbstractAlignedGrid","text":"A grid dimension aligned exactly with a standard dimension, such as lattitude or longitude.\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.AbstractDimension","page":"DimensionalData.jl","title":"DimensionalData.AbstractDimension","text":"An AbstractDimension tags the dimensions in an AbstractArray.\n\nIt can also contain spatial coordinates and their metadata. For simplicity, the same types are used both for storing dimension information and for indexing.\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.AlignedGrid","page":"DimensionalData.jl","title":"DimensionalData.AlignedGrid","text":"An alligned grid without known regular spacing. These grids will generally be paired with a vector of coordinates along the dimension, instead of a range.\n\nAs the size of the cells is not known, the bounds must be actively tracked.\n\nFields\n\norder: Order trait indicating array and index order\nlocus: Locus trait indicating the position of the indexed point within the cell span\nsampling: Sampling trait indicating wether the grid cells are single samples or means\nbounds: the outer edges of the grid (different to the first and last coordinate).\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.At","page":"DimensionalData.jl","title":"DimensionalData.At","text":"At(x)\n\nSelector that exactly matches the value on the passed-in dimensions, or throws an error. For ranges and arrays, every value must match an existing value - not just the end points.\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.Between","page":"DimensionalData.jl","title":"DimensionalData.Between","text":"Between(a, b)\n\nSelector that retreive all indices located between 2 values.\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.CategoricalGrid","page":"DimensionalData.jl","title":"DimensionalData.CategoricalGrid","text":"A grid dimension where the values are categories.\n\nFields\n\norder: Order trait indicating array and index order\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.Center","page":"DimensionalData.jl","title":"DimensionalData.Center","text":"Indicates dimensions that are defined by their center coordinates/time/position.\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.DependentGrid","page":"DimensionalData.jl","title":"DimensionalData.DependentGrid","text":"Traits describing a grid dimension that is dependent on other grid dimensions.\n\nIndexing into a dependent dimension must provide all other dependent dimensions.\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.Dim","page":"DimensionalData.jl","title":"DimensionalData.Dim","text":"A generic dimension. For use when custom dims are required when loading data from a file. The sintax is ugly and verbose to use for indexing, ie Dim{:lat}(1:9) rather than Lat(1:9). This is the main reason they are not the only type of dimension availabile.\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.DimensionalArray","page":"DimensionalData.jl","title":"DimensionalData.DimensionalArray","text":"DimensionalArray(A::AbstractArray, dims::Tuple, refdims::Tuple)\n\nA basic DimensionalArray type.\n\nMaintains and updates its dimensions through transformations\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.DimensionalArray-Tuple{AbstractArray,Any}","page":"DimensionalData.jl","title":"DimensionalData.DimensionalArray","text":"DimensionalArray(A::AbstractArray, dims::Tuple; refdims=())\n\nConstructor with optional refdims keyword.\n\nExample:\n\nusing Dates, DimensionalData\nusing DimensionalData: Time, X\ntimespan = DateTime(2001):Month(1):DateTime(2001,12)\nA = DimensionalArray(rand(12,10), (Time(timespan), X(10:10:100))) \nA[X<|Near([12, 35]), Time<|At(DateTime(2001,5))]\nA[Near(DateTime(2001, 5, 4)), Between(20, 50)]\n\n\n\n\n\n","category":"method"},{"location":"#DimensionalData.End","page":"DimensionalData.jl","title":"DimensionalData.End","text":"Indicates dimensions that are defined by their end coordinates/time/position.\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.Grid","page":"DimensionalData.jl","title":"DimensionalData.Grid","text":"Traits describing the grid type of a dimension.\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.IndependentGrid","page":"DimensionalData.jl","title":"DimensionalData.IndependentGrid","text":"A grid dimension that is independent of other grid dimensions.\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.Locus","page":"DimensionalData.jl","title":"DimensionalData.Locus","text":"Indicate the position of index values in grid cells.\n\nThis is frequently Start for time series, but may be Center for spatial data.\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.LookupGrid","page":"DimensionalData.jl","title":"DimensionalData.LookupGrid","text":"A grid dimension that uses an array lookup to convert dimension from dim(grid) to dims(array).\n\nFields\n\ndims: a tuple containing dimenension types or symbols matching the order         needed to index the lookup matrix.\nsampling: a Sampling trait indicating wether the grid cells are sampled points or means\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.Metadata","page":"DimensionalData.jl","title":"DimensionalData.Metadata","text":"Abstract type for dimension metadata wrappers.\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.MultiSample","page":"DimensionalData.jl","title":"DimensionalData.MultiSample","text":"Multiple samples from the span combined using method M,  where M is typeof(mean), typeof(sum) etc.\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.Near","page":"DimensionalData.jl","title":"DimensionalData.Near","text":"Near(x)\n\nSelector that selects the nearest index to its contained value(s)\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.Ordered","page":"DimensionalData.jl","title":"DimensionalData.Ordered","text":"Trait container for dimension and array ordering in AlignedGrid.\n\nThe default is Ordered(Forward(), Forward())\n\nAll combinations of forward and reverse order for data and indices seem to occurr in real datasets, as strange as that seems. We cover these possibilities by specifying the order of both explicitly.\n\nKnowing the order of indices is important for using methods like searchsortedfirst() to find indices in sorted lists of values. Knowing the order of the data is then required to map to the actual indices. It's also used to plot the data later - which always happens in smallest to largest order.\n\nBase also defines Forward and Reverse, but they seem overly complicated for our purposes.\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.RegularGrid","page":"DimensionalData.jl","title":"DimensionalData.RegularGrid","text":"An alligned grid known to have equal spacing between all cells.\n\nFields\n\norder: Order trait indicating array and index order\nlocus: Locus trait indicating the position of the indexed point within the cell span\nsampling: Sampling trait indicating wether the grid cells are single samples or means\nspan: the size of a grid step, such as 1u\"km\" or Month(1)\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.Sampling","page":"DimensionalData.jl","title":"DimensionalData.Sampling","text":"Indicates wether the cell value is specific to the locus point or is related to the whole the span.\n\nThe span may contain a value if the distance between locii if known. This will often be identical to the distance between any two sequential cell values, but may be distinct due to rounding errors in a vector index, or context-dependent spans such as Month.\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.Selector","page":"DimensionalData.jl","title":"DimensionalData.Selector","text":"Selectors indicate that index values are not indices, but points to be selected from the dimension values, such as DateTime objects on a Time dimension.\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.SingleSample","page":"DimensionalData.jl","title":"DimensionalData.SingleSample","text":"Each cell value represents a single discrete sample taken at the index location.\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.Start","page":"DimensionalData.jl","title":"DimensionalData.Start","text":"Indicates dimensions that are defined by their start coordinates/time/position.\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.TransformedGrid","page":"DimensionalData.jl","title":"DimensionalData.TransformedGrid","text":"Grid type using an affine transformation to convert dimension from dim(grid) to dims(array).\n\nFields\n\ndims: a tuple containing dimenension types or symbols matching the order         needed by the transform function.\nsampling: a Sampling trait indicating wether the grid cells are sampled points or means\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.UnknownGrid","page":"DimensionalData.jl","title":"DimensionalData.UnknownGrid","text":"Fallback grid type\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.UnknownSampling","page":"DimensionalData.jl","title":"DimensionalData.UnknownSampling","text":"The sampling method is unknown.\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.Unordered","page":"DimensionalData.jl","title":"DimensionalData.Unordered","text":"Trait indicating that the array or dimension has no order.\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.dims","page":"DimensionalData.jl","title":"DimensionalData.dims","text":"dims(x)\n\nReturn a tuple of the dimensions for a dataset. These can  contain the coordinate ranges if bounds() and select() are to be used,  or you want them to be shown on plots in place of the array indices.\n\nThey can also contain a units string or unitful unit to use and plot  dimension units.\n\nThis is the only method required for this package to work. It probably  requires defining a dims field on your object to store dims in.\n\n\n\n\n\n","category":"function"},{"location":"#DimensionalData.dims-Tuple{Any,Any}","page":"DimensionalData.jl","title":"DimensionalData.dims","text":"Get the dimension(s) matching the type(s) of the lookup dimension.\n\n\n\n\n\n","category":"method"},{"location":"#DimensionalData.label","page":"DimensionalData.jl","title":"DimensionalData.label","text":"label(x)\n\nGet a plot label for data or a dimension. This will include the name and units  if they exist, and anything else that should be shown on a plot.\n\n\n\n\n\n","category":"function"},{"location":"#DimensionalData.metadata","page":"DimensionalData.jl","title":"DimensionalData.metadata","text":"metadata(x)\n\nReturn the metadata of a dimension or data object.\n\n\n\n\n\n","category":"function"},{"location":"#DimensionalData.name","page":"DimensionalData.jl","title":"DimensionalData.name","text":"name(x)\n\nGet the name of data or a dimension.\n\n\n\n\n\n","category":"function"},{"location":"#DimensionalData.refdims","page":"DimensionalData.jl","title":"DimensionalData.refdims","text":"refdims(x)\n\nReference dimensions for an array that is a slice or view of another  array with more dimensions. \n\nslicedims(a, dims) returns a tuple containing the current new dimensions and the new reference dimensions. Refdims can be stored in a field or disgarded,  as it is mostly to give context to plots. Ignoring refdims will simply leave some captions empty.  \n\n\n\n\n\n","category":"function"},{"location":"#DimensionalData.shortname","page":"DimensionalData.jl","title":"DimensionalData.shortname","text":"shortname(x)\n\nGet the short name of array data or a dimension.\n\n\n\n\n\n","category":"function"},{"location":"#DimensionalData.units","page":"DimensionalData.jl","title":"DimensionalData.units","text":"units(x)\n\nReturn the units of a dimension. This could be a string, a unitful unit, or nothing. \n\n\n\n\n\n","category":"function"},{"location":"#DimensionalData.val","page":"DimensionalData.jl","title":"DimensionalData.val","text":"val(x)\n\nReturn the contained value of a wrapper object, otherwise just returns the object.\n\n\n\n\n\n","category":"function"},{"location":"#DimensionalData.AbstractParametricDimension","page":"DimensionalData.jl","title":"DimensionalData.AbstractParametricDimension","text":"Dimensions with user-set type paremeters\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.Forward","page":"DimensionalData.jl","title":"DimensionalData.Forward","text":"Trait indicating that the array or dimension is in the normal forward order.\n\n\n\n\n\n","category":"type"},{"location":"#DimensionalData.Reverse","page":"DimensionalData.jl","title":"DimensionalData.Reverse","text":"Trait indicating that the array or dimension is in the reverse order. Selector lookup or plotting will be reversed.\n\n\n\n\n\n","category":"type"},{"location":"#Base.permutedims-Tuple{Tuple{Vararg{AbstractDimension,N}} where N,Union{Array{#s20,1} where #s20<:Integer, Tuple{#s19,Vararg{Any,N} where N} where #s19<:Integer}}","page":"DimensionalData.jl","title":"Base.permutedims","text":"Sort dimensions into the order they take in the array.\n\nMissing dimensions are replaced with nothing\n\n\n\n\n\n","category":"method"},{"location":"#DimensionalData.dimnum-Tuple{Any,Any}","page":"DimensionalData.jl","title":"DimensionalData.dimnum","text":"Get the number of an AbstractDimension as ordered in the array\n\n\n\n\n\n","category":"method"},{"location":"#DimensionalData.dims2indices","page":"DimensionalData.jl","title":"DimensionalData.dims2indices","text":"Convert a tuple of AbstractDimension to indices, ranges or Colon.\n\n\n\n\n\n","category":"function"},{"location":"#DimensionalData.formatdims-Union{Tuple{N}, Tuple{T}, Tuple{AbstractArray{T,N},Tuple}} where N where T","page":"DimensionalData.jl","title":"DimensionalData.formatdims","text":"Format the dimension to match internal standards.\n\nMostily this means converting tuples and UnitRanges to LinRange, which is easier to handle. Errors are thrown if dims don't match the array dims or size.\n\n\n\n\n\n","category":"method"},{"location":"#DimensionalData.rebuild","page":"DimensionalData.jl","title":"DimensionalData.rebuild","text":"rebuild(x::AbstractDimensionalArray, data, [dims], [refdims])\nrebuild(x::AbstractDimension, val, [grid], [metadata])\nrebuild(x; kwargs...)\n\nRebuild an object struct with updated values.\n\n\n\n\n\n","category":"function"},{"location":"#DimensionalData.reducedims-Tuple{Any,Any}","page":"DimensionalData.jl","title":"DimensionalData.reducedims","text":"Replace the specified dimensions with an index of length 1 to match a new array size where the dimension has been reduced to a length of 1, but the number of dimensions has not changed.\n\nUsed in mean, reduce, etc.\n\nGrid traits are also updated to correspond to the change in cell span, sampling type and order.\n\n\n\n\n\n","category":"method"},{"location":"#DimensionalData.slicedims-Tuple{Any,Tuple{Vararg{AbstractDimension,N}} where N}","page":"DimensionalData.jl","title":"DimensionalData.slicedims","text":"Slice the dimensions to match the axis values of the new array\n\nAll methods returns a tuple conatining two tuples: the new dimensions, and the reference dimensions. The ref dimensions are no longer used in the new struct but are useful to give context to plots.\n\nCalled at the array level the returned tuple will also include the previous reference dims attached to the array.\n\n\n\n\n\n","category":"method"},{"location":"#DimensionalData.@dim","page":"DimensionalData.jl","title":"DimensionalData.@dim","text":"@dim typ [name=string(typ)] [shortname=string(typ)]\n\nMacro to easily define specific dimensions.\n\nExample:\n\n@dim Lat \"Lattitude\"\n\n\n\n\n\n","category":"macro"}]
}
